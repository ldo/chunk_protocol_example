#!/usr/bin/python3
#+
# Example client for chunk protocol, using asyncio. Invoke this script
# as follows:
#
#     example_client «action» [«action» ...]
#
# where each «action» describes an action to perform. Currently-
# recognized actions are:
#
#     delay:«seconds»
#         wait the specified number of «seconds» before continuing. If
#         you wait longer than the server timeout, it will disconnect
#         you.
#
#     request:«request-id»:«contents»
#         send a request to the server and display any returned
#         response. «request-id» is the 4-byte request ID, and
#         contents is either the literal request chunk contents, or
#         can take the form
#
#             «id»=«subchunk»[:«id»=«subchunk»]
#
#         where each «id» is a 4-byte subchunk ID and «subchunk» is
#         the corresponding literal subchunk contents. Note that request
#         and chunk IDs are case-sensitive.
#            Each of the IDs and chunk/subchunk contents can contain
#         sequences of the form %«nn» where «nn» is 2 hexadecimal
#         digits, useful for encoding non-ASCII characters or
#         characters with special interpretations in the
#         chunk-specification syntax when they occur literally. For
#         example, a “%” character can be represented as “%25”, while
#         “:” is “%3A” or “%3a”, and “=” is “%3d” or “%3D”.
#            For example (as per the sample protocol defined in
#         common.py),
#
#             request:ECHO:'hi there!'
#
#         sends a request to the server to echo the specified text
#         back to the client, while
#
#             request:DLAY:NTVL=3.5
#
#         tells the server to delay 3.5 seconds before responding,
#         and
#
#             request:SHUT
#
#         tells the server to shut down.
#            Note that no validation of the request is done on the
#         client side, other than conformance to basic chunk syntax.
#         If a bad request is sent, the server will log an error
#         message and disconnect you.
#
#     raw-send:«contents»
#         send raw data to the server, without regard to correct
#         chunk syntax.
#
#     raw-receive:«nr-bytes»
#         receive the specified number of bytes or raw data from
#         the server.
#-

import sys
from weakref import \
    ref as weak_ref
import socket
import asyncio
import getopt
import common
from common import \
    chunk, \
    ID

loop = asyncio.get_event_loop()

#+
# Useful stuff
#-

def unescape(s, arg) :
    "encodes string s as bytes, expanding any %-escapes found."
    rest = s
    t = b""
    while True :
        pos = rest.find("%")
        if pos < 0 :
            t += rest.encode("ascii")
            break
        #end if
        if pos + 3 > len(rest) :
            raise SyntaxError("truncated %%-sequence in %s" % repr(arg))
        #end if
        t += rest[:pos].encode("ascii")
        n = 0
        for d in rest[pos + 1:pos + 3] :
            if '0' <= d <= '9' :
                d = ord(d) - ord('0')
            elif 'a' <= d <= 'f' :
                d = ord(d) - ord('a') + 10
            elif 'A' <= d <= 'F' :
                d = ord(d) - ord('A') + 10
            else :
                raise SyntaxError("bad %%-sequence in %s" % repr(arg))
            #end if
            n = n * 16 + d
        #end for
        t += bytes((n,))
        rest = rest[pos + 3:]
    #end while
    return t
#end unescape

async def send_all(to_socket, contents) :

    done = loop.create_future()
    w_loop = weak_ref(loop)

    def write_more() :
        nonlocal contents
        loop = w_loop()
        assert loop != None, "event loop has gone away"
        try :
            written = to_socket.send(contents)
        except OSError as err :
            done.set_exception(err)
            written = None
        #end try
        if written != None :
            contents = contents[written:]
            if len(contents) == 0 :
                done.set_result(None)
            #end if
        #end if
        if done.done() :
            loop.remove_writer(to_socket)
        #end if
    #end write_more

#begin send_all
    if len(contents) != 0 :
        loop.add_writer(to_socket, write_more)
    else :
        done.set_result(None)
    #end if
    await done
#end send_all

async def receive_all(from_socket, n) :
    "reads n bytes from from_socket, raising an exception if" \
    " EOF reached."

    done = loop.create_future()
    w_loop = weak_ref(loop)
    result = b""

    def read_more() :
        nonlocal n, result
        loop = w_loop()
        assert loop != None, "event loop has gone away"
        try :
            data = from_socket.recv(n)
        except OSError as err :
            done.set_exception(err)
            data = None
        #end try
        if data != None :
            if len(data) == 0 :
                done.set_exception(IOError("EOF on socket"))
            else :
                result += data
                n -= len(data)
                if n == 0 :
                    done.set_result(result)
                #end if
            #end if
        #end if
        if done.done() :
            loop.remove_reader(from_socket)
        #end if
    #end read_more

#begin receive_all
    if n != 0 :
        loop.add_reader(from_socket, read_more)
    else :
        done.set_result(b"")
    #end if
    return await done
#end receive_all

async def server_request(conn, id, contents) :
    await send_all(conn, chunk.make(id, contents))
    header = await receive_all(conn, 8)
    response = header + await receive_all \
      (
        conn,
        chunk.extract_header(header)[1]
      )
    response = chunk.extract(response)[:2]
    return response
#end server_request

#+
# Actions to perform
#-

def action_delay(interval) :

    def doit(server) :
        return asyncio.sleep(interval)
    #end doit

#begin action_delay
    return doit
#end action_delay

def action_request(arg) :

    op_id = None
    op_args = []

    def doit(server) :
        return server_request(server, op_id, op_args)
    #end doit

#begin action_request
    items = arg.split(":")
    op_id = unescape(items[0], arg)
    if len(op_id) != 4 :
        raise SyntaxError("opcode not 4 bytes: %s" % repr(op_id))
    #end if
    items = items[1:]
    if len(items) == 1 and "=" not in items[0] :
        op_args = unescape(items[0], arg)
    else :
        for item in items :
            item_id, item_contents = item.split("=")
            item_id = unescape(item_id, arg)
            if len(item_id) != 4 :
                raise SyntaxError("content subchunk id not 4 bytes: %s" % repr(item_id))
            #end if
            op_args.append((item_id, unescape(item_contents, arg)))
        #end for
    #end if
    return doit
#end action_request

def action_raw_send(arg) :

    to_send = unescape(arg, arg)

    def doit(server) :
        return send_all(server, to_send)
    #end doit

#begin action_raw_send
    return doit
#end action_raw_send

def action_raw_receive(to_receive) :

    def doit(server) :
        return receive_all(server, to_receive)
    #end doit

#begin action_raw_receive
    if to_receive < 0 :
        raise ValueError("cannot receive negative nr bytes")
    #end if
    return doit
#end action_raw_receive

available_actions = \
    {
        "delay" :
            {
                "action" : action_delay,
                "arg_conv" : float,
            },
        "request" :
            {
                "action" : action_request,
            },
        "raw-send" :
            {
                "action" : action_raw_send,
            },
        "raw-receive" :
            {
                "action" : action_raw_receive,
                "arg_conv" : int,
            },
    }

#+
# Mainline
#-

opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    []
  )
if len(args) == 0 :
    raise getopt.GetoptError("nothing to do")
#end if
actions = []
for item in args :
    op, arg = item.split(":", 1)
    if op not in available_actions :
        raise getopt.GetoptError("unrecognized action %s" % repr(op))
    #end if
    action = available_actions[op]
    try :
        argval = action.get("arg_conv", lambda s : s)(arg)
    except ValueError :
        raise getopt.GetoptError \
          (
            "arg %s is not valid for op %s" % (repr(arg), op)
          )
    #end try
    actions.append({"name" : item, "action" : action["action"](argval)})
#end for

async def mainline() :
    server = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
    server.connect(common.socket_name)
    for action in actions :
        sys.stdout.write("action: %s\n" % action["name"])
        sys.stdout.flush()
        result = await action["action"](server)
        if result != None :
            sys.stdout.write(" result: %s\n" % repr(result))
        #end if
    #end for
    server.close()
#end mainline

loop.run_until_complete(mainline())
